// This is your Prisma schema file for WorkLedger
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionTier {
  STARTUP
  GROWTH
  ENTERPRISE
}

enum EmployeeRole {
  DEVELOPER
  DESIGNER
  MANAGER
  SALES
  MARKETING
  OTHER
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CertificateStatus {
  DRAFT
  ISSUED
  REVOKED
}

enum IntegrationType {
  GITHUB
  GITLAB
  SALESFORCE
  HUBSPOT
  JIRA
  SLACK
  OTHER
}

// Core Company Model
model Company {
  id          String           @id @default(cuid())
  name        String
  domain      String           @unique
  logoUrl     String?
  website     String?
  industry    String?
  size        String?

  // Subscription
  tier        SubscriptionTier @default(STARTUP)
  isActive    Boolean          @default(true)
  trialEnds   DateTime?

  // Settings
  settings    CompanySettings?

  // Relationships
  employees   Employee[]
  certificates Certificate[]
  integrations Integration[]
  auditLogs   AuditLog[]
  invitations Invitation[]
  githubInstallations GitHubInstallation[]
  githubOrganizationMembers GitHubOrganizationMember[]
  githubIntegrations GitHubIntegration[]
  githubWebhooks GitHubWebhook[]
  githubTokenAudits GitHubTokenAudit[]

  // Metadata
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("companies")
}

// Company Settings & Privacy Controls
model CompanySettings {
  id               String   @id @default(cuid())
  companyId        String   @unique
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Privacy Settings
  shareSkills      Boolean  @default(true)
  shareAchievements Boolean @default(true)
  shareProjectTypes Boolean @default(true)
  shareTraining    Boolean  @default(true)
  shareTenure      Boolean  @default(true)

  // Certificate Customization
  certificateTemplate String?
  companyBranding  Boolean  @default(false)
  customFields     Json?    // Store additional custom fields

  // Automation Settings
  autoIssueEnabled Boolean  @default(false)
  minTrackingDays  Int      @default(30)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("company_settings")
}

// Employee Model
model Employee {
  id              String        @id @default(cuid())
  email           String        @unique
  firstName       String
  lastName        String
  avatarUrl       String?
  role            EmployeeRole  @default(OTHER)
  title           String?
  department      String?

  // Profile fields
  bio             String?       @db.Text
  linkedinUrl     String?
  personalWebsite String?

  // Company Relationship
  companyId       String
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Employment Details
  startDate       DateTime      @default(now())
  endDate         DateTime?
  isActive        Boolean       @default(true)

  // External Integrations
  githubUsername  String?
  githubId        String?
  salesforceId    String?

  // Auto-discovery fields
  autoDiscovered  Boolean       @default(false)
  discoveryConfidence Float?    // 0.0 to 1.0

  // Relationships
  certificates    Certificate[]
  skillRecords    SkillRecord[]
  activities      GitHubActivity[]
  githubConnection GitHubConnection?
  repositories    Repository[]
  skillEvolutions SkillEvolution[]
  githubOrganizationMembers GitHubOrganizationMember[]
  githubTokenAudits GitHubTokenAudit[]

  // Metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([companyId, email])
  @@map("employees")
}

// Skills Master Table
model Skill {
  id          String        @id @default(cuid())
  name        String        @unique
  category    String        // e.g., "Programming Language", "Framework", "Tool"
  description String?

  // Relationships
  skillRecords SkillRecord[]
  skillEvolutions SkillEvolution[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("skills")
}

// Employee Skill Tracking
model SkillRecord {
  id          String     @id @default(cuid())
  employeeId  String
  employee    Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skillId     String
  skill       Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)

  level       SkillLevel @default(BEGINNER)
  confidence  Float?     // 0.0 - 1.0 confidence score

  // Evidence tracking
  linesOfCode Int?
  projectsUsed Int?
  lastUsed    DateTime?

  // Auto-detected vs manual
  isAutoDetected Boolean @default(false)
  source         String? // e.g., "github", "manual", "training"

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([employeeId, skillId])
  @@map("skill_records")
}

// GitHub Activity Tracking
model GitHubActivity {
  id              String    @id @default(cuid())
  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Repository Info
  repoName        String
  repoFullName    String
  isPrivate       Boolean   @default(false)

  // Activity Data
  commits         Int       @default(0)
  pullRequests    Int       @default(0)
  linesAdded      Int       @default(0)
  linesDeleted    Int       @default(0)
  filesChanged    Int       @default(0)

  // Language Detection
  languages       Json      // Store language percentages
  frameworks      Json?     // Detected frameworks

  // Time Period
  periodStart     DateTime
  periodEnd       DateTime

  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([employeeId, repoName, periodStart])
  @@map("github_activities")
}

// Digital Certificates
model Certificate {
  id              String            @id @default(cuid())
  verificationId  String            @unique @default(cuid())

  // Employee & Company
  employeeId      String
  employee        Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  companyId       String
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Certificate Data
  title           String
  description     String?
  status          CertificateStatus @default(DRAFT)

  // Time Period
  periodStart     DateTime
  periodEnd       DateTime
  issueDate       DateTime          @default(now())
  expiryDate      DateTime?

  // Certificate Content (JSON)
  skillsData      Json              // Skills acquired/demonstrated
  achievements    Json              // Key achievements
  metrics         Json?             // Performance metrics (sanitized)

  // Security
  digitalSignature String?          // Cryptographic signature
  hashValue       String?           // Content hash for verification

  // File
  certificateFile CertificateFile?

  // Metadata
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("certificates")
}

// External Integrations
model Integration {
  id           String          @id @default(cuid())
  companyId    String
  company      Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  type         IntegrationType
  name         String          // e.g., "GitHub Enterprise"

  // Configuration
  config       Json            // Store integration-specific config
  credentials  Json?           // Encrypted credentials

  // Status
  isActive     Boolean         @default(true)
  lastSync     DateTime?
  syncInterval Int?            // Minutes between syncs

  // Metadata
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@unique([companyId, type, name])
  @@map("integrations")
}

// Audit Logging for Security & Compliance
model AuditLog {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Event Details
  action      String   // e.g., "certificate_issued", "data_accessed"
  resource    String   // What was affected
  resourceId  String?  // ID of the affected resource

  // Actor
  actorType   String   // "employee", "admin", "system"
  actorId     String?  // ID of who performed the action
  actorEmail  String?

  // Context
  ipAddress   String?
  userAgent   String?
  metadata    Json?    // Additional context

  // Timestamp
  timestamp   DateTime @default(now())

  @@map("audit_logs")
}

// User Accounts (separate from employees for access control)
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?  // Hashed password

  // Profile
  firstName   String?
  lastName    String?
  avatarUrl   String?

  // Account Status
  isActive    Boolean  @default(true)
  emailVerified Boolean @default(false)

  // Role & Permissions
  role        String   @default("user") // "admin", "company_admin", "user"

  // Password Reset
  resetToken  String?
  resetExpires DateTime?

  // Sessions
  sessions    Session[]

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLogin   DateTime?

  @@map("users")
}

// Session Management
model Session {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  token       String   @unique
  expires     DateTime

  // Session Context
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime @default(now())

  @@map("sessions")
}

// Employee Invitation Management
model Invitation {
  id          String   @id @default(cuid())
  token       String   @unique @default(cuid())

  // Invitation details
  email       String
  firstName   String
  lastName    String
  role        EmployeeRole @default(OTHER)
  title       String?
  department  String?

  // Company relationship
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Invitation status
  status      String   @default("pending") // pending, accepted, expired, cancelled
  invitedBy   String   // Email of the person who sent the invitation

  // Timestamps
  expiresAt   DateTime @default(dbgenerated("NOW() + INTERVAL '7 days'"))
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([token])
  @@index([email, companyId])
  @@map("invitations")
}

// GitHub Connection for OAuth
model GitHubConnection {
  id              String   @id @default(cuid())
  employeeId      String   @unique
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // GitHub OAuth Data
  githubUserId    String   @unique
  githubUsername  String
  accessToken     String   // Encrypted
  refreshToken    String?  // Encrypted
  scope          String?

  // Connection Status
  isActive        Boolean  @default(true)
  lastSync        DateTime?

  // Metadata
  connectedAt     DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("github_connections")
}

// Repository Tracking
model Repository {
  id              String   @id @default(cuid())
  employeeId      String
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Repository Info
  githubRepoId    String   @unique
  name            String
  fullName        String
  isPrivate       Boolean  @default(false)
  isFork          Boolean  @default(false)

  // Repository Details
  description     String?
  homepage        String?
  defaultBranch   String?
  createdAt       DateTime
  pushedAt        DateTime?

  // Repository Stats
  stars           Int      @default(0)
  forks           Int      @default(0)
  watchers        Int      @default(0)
  size            Int      @default(0)
  openIssues      Int      @default(0)

  // Language Data
  primaryLanguage String?
  languages       Json     // {language: percentage}

  // Detected Frameworks
  frameworks      Json?    // ["react", "nextjs", etc]

  // Activity
  lastActivityAt  DateTime?
  totalCommits    Int      @default(0)

  // Relationships
  activities      RepositoryActivity[]
  commits         Commit[]

  updatedAt       DateTime @default(now()) @updatedAt

  @@map("repositories")
}

// Repository Activity Tracking
model RepositoryActivity {
  id              String     @id @default(cuid())
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  // Activity Period
  periodStart     DateTime
  periodEnd       DateTime

  // Contribution Metrics
  commits         Int        @default(0)
  pullRequests    Int        @default(0)
  issues          Int        @default(0)
  reviews         Int        @default(0)

  // Code Metrics
  linesAdded      Int        @default(0)
  linesDeleted    Int        @default(0)
  filesChanged    Int        @default(0)

  // Detected Skills
  detectedSkills  Json       // Skills found in this period

  createdAt       DateTime   @default(now())

  @@unique([repositoryId, periodStart, periodEnd])
  @@map("repository_activities")
}

// Skill Evolution Tracking
model SkillEvolution {
  id              String    @id @default(cuid())
  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skillId         String
  skill           Skill     @relation(fields: [skillId], references: [id])

  // Evolution Data
  date            DateTime
  level           SkillLevel
  confidence      Float     // 0.0 - 1.0

  // Evidence
  evidenceType    String    // "github", "training", "project", etc
  evidenceData    Json      // Context about how skill was demonstrated

  // Metrics at this point
  totalProjects   Int       @default(0)
  totalLines      Int       @default(0)

  createdAt       DateTime  @default(now())

  @@index([employeeId, skillId, date])
  @@map("skill_evolutions")
}

// Certificate Files Storage
model CertificateFile {
  id              String      @id @default(cuid())
  certificateId   String      @unique
  certificate     Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  // File Data
  fileUrl         String      // URL to PDF file
  fileHash        String      // SHA-256 hash of file
  fileSize        Int         // Size in bytes

  // QR Code
  qrCodeUrl       String?     // URL to QR code image

  // Verification
  publicKey       String      // Public key for verification
  signature       String      // Digital signature

  createdAt       DateTime    @default(now())

  @@map("certificate_files")
}

// Job Queue for Background Processing
model JobQueue {
  id              String   @id @default(cuid())

  // Job Info
  type            String   // "github_sync", "skill_analysis", "certificate_generation"
  status          String   // "pending", "processing", "completed", "failed"
  priority        Int      @default(0)

  // Job Data
  payload         Json     // Job-specific data
  result          Json?    // Job result data
  error           String?  // Error message if failed

  // Timing
  scheduledFor    DateTime @default(now())
  startedAt       DateTime?
  completedAt     DateTime?

  // Retry Logic
  attempts        Int      @default(0)
  maxAttempts     Int      @default(3)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([type, status])
  @@index([scheduledFor])
  @@map("job_queue")
}

// Commit Tracking
model Commit {
  id              String     @id @default(cuid())
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  // Commit Info
  sha             String     @unique
  message         String
  authorName      String
  authorEmail     String
  authorDate      DateTime
  committerName   String?
  committerEmail  String?
  commitDate      DateTime

  // Commit Stats
  additions       Int        @default(0)
  deletions       Int        @default(0)
  filesChanged    Int        @default(0)

  // Files
  files           Json?      // Array of file paths changed

  // GitHub URLs
  htmlUrl         String?
  apiUrl          String?

  // Parent commits
  parentShas      String[]   // Array of parent commit SHAs

  createdAt       DateTime   @default(now())

  @@index([repositoryId, authorDate])
  @@index([authorEmail])
  @@map("commits")
}

// GitHub App Installation tracking
model GitHubInstallation {
  id              String   @id @default(cuid())
  installationId  BigInt   @unique
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // GitHub organization details
  accountLogin    String   // Organization username
  accountId       BigInt
  accountType     String   @default("Organization")

  // Installation permissions and events
  permissions     Json     @default("{}")
  events          String[]

  // Repository access
  repositorySelection String @default("all") // 'all' or 'selected'
  selectedRepositories Json  @default("[]")

  // Status
  isActive        Boolean  @default(true)
  installedAt     DateTime @default(now())
  updatedAt       DateTime @updatedAt
  suspendedAt     DateTime?

  @@map("github_installations")
}

// GitHub Organization Members cache
model GitHubOrganizationMember {
  id              String   @id @default(cuid())
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  githubUserId    BigInt
  githubUsername  String
  githubEmail     String?
  githubName      String?

  // Employment verification
  employeeId      String?
  employee        Employee? @relation(fields: [employeeId], references: [id])
  matchConfidence Float?    // 0.0 to 1.0
  matchMethod     String?   // 'email', 'name', 'manual', 'commit_analysis'

  // Organization role
  orgRole         String?   // 'member', 'admin', 'owner'
  orgPermissions  Json?

  // Status
  isActive        Boolean   @default(true)
  discoveredAt    DateTime  @default(now())
  lastActivityAt  DateTime?

  @@unique([companyId, githubUserId])
  @@map("github_organization_members")
}

// GitHub Integration for company-level tokens
model GitHubIntegration {
  id              String   @id @default(cuid())
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tokenType       String   // 'oauth_access', 'app_installation', 'organization'

  // Encrypted token storage
  encryptedAccessToken  String
  encryptedRefreshToken String?

  // Token metadata
  expiresAt       DateTime?
  scope           String?
  organizationLogin String? // GitHub org username
  installationId  BigInt?   // For GitHub Apps

  // Additional data
  metadata        Json      @default("{}")

  // Status tracking
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deactivatedAt   DateTime?

  @@unique([companyId, tokenType])
  @@index([companyId, isActive])
  @@index([installationId])
  @@map("github_integrations")
}

// Webhook tracking
model GitHubWebhook {
  id              String    @id @default(cuid())
  installationId  BigInt?
  companyId       String?
  company         Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Webhook details
  eventType       String
  action          String?
  payload         Json

  // Processing status
  processed       Boolean   @default(false)
  processedAt     DateTime?
  errorMessage    String?
  retryCount      Int       @default(0)

  // Metadata
  receivedAt      DateTime  @default(now())
  githubDeliveryId String?

  @@index([processed, receivedAt])
  @@index([companyId, eventType, receivedAt])
  @@map("github_webhooks")
}

// Audit trail for token operations
model GitHubTokenAudit {
  id              String    @id @default(cuid())
  companyId       String?
  company         Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employeeId      String?
  employee        Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  // Operation details
  operation       String    // 'created', 'refreshed', 'revoked', 'expired'
  tokenType       String

  // Context
  userAgent       String?
  ipAddress       String?
  userId          String?   // Who performed the operation

  // Metadata
  metadata        Json      @default("{}")
  createdAt       DateTime  @default(now())

  @@map("github_token_audit")
}

// Indexes for Performance
// @@index([companyId]) // Already covered by foreign keys
// @@index([employeeId]) // Already covered by foreign keys